/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './core/routes/__root'
import { Route as BoardsRouteImport } from './core/routes/boards/route'
import { Route as IndexImport } from './core/routes/index'
import { Route as BoardsIdImport } from './core/routes/boards/$id'

// Create/Update Routes

const BoardsRouteRoute = BoardsRouteImport.update({
  id: '/boards',
  path: '/boards',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./core/routes/boards/route.lazy').then((d) => d.Route),
)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const BoardsIdRoute = BoardsIdImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => BoardsRouteRoute,
} as any).lazy(() =>
  import('./core/routes/boards/$id.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/boards': {
      id: '/boards'
      path: '/boards'
      fullPath: '/boards'
      preLoaderRoute: typeof BoardsRouteImport
      parentRoute: typeof rootRoute
    }
    '/boards/$id': {
      id: '/boards/$id'
      path: '/$id'
      fullPath: '/boards/$id'
      preLoaderRoute: typeof BoardsIdImport
      parentRoute: typeof BoardsRouteImport
    }
  }
}

// Create and export the route tree

interface BoardsRouteRouteChildren {
  BoardsIdRoute: typeof BoardsIdRoute
}

const BoardsRouteRouteChildren: BoardsRouteRouteChildren = {
  BoardsIdRoute: BoardsIdRoute,
}

const BoardsRouteRouteWithChildren = BoardsRouteRoute._addFileChildren(
  BoardsRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/boards': typeof BoardsRouteRouteWithChildren
  '/boards/$id': typeof BoardsIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/boards': typeof BoardsRouteRouteWithChildren
  '/boards/$id': typeof BoardsIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/boards': typeof BoardsRouteRouteWithChildren
  '/boards/$id': typeof BoardsIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/boards' | '/boards/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/boards' | '/boards/$id'
  id: '__root__' | '/' | '/boards' | '/boards/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BoardsRouteRoute: typeof BoardsRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BoardsRouteRoute: BoardsRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/boards"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/boards": {
      "filePath": "boards/route.tsx",
      "children": [
        "/boards/$id"
      ]
    },
    "/boards/$id": {
      "filePath": "boards/$id.tsx",
      "parent": "/boards"
    }
  }
}
ROUTE_MANIFEST_END */
